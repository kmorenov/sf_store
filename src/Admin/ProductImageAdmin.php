<?php
/**
 * Created by PhpStorm.
 * User: kostya
 * Date: 16/11/18
 * Time: 12:35 AM
 */

namespace App\Admin;

use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Symfony\Component\Form\Extension\Core\Type\FileType;
//use Symfony\Component\HttpFoundation\File\File;
use App\Entity\ProductImage;
use Symfony\Component\Form\Extension\Core\Type\TextType;

class ProductImageAdmin extends AbstractAdmin
{
    protected function configureFormFields(FormMapper $formMapper)
    {
       // get the current Image instance
        $image = $this->getSubject();

        // use $fileFieldOptions so we can add other options to the field
        $fileFieldOptions = ['required' => false];
               if ($image && ($webPath = $image->getWebPath())) {
                   // get the container so the full path to the image can be set
                   dump($webPath);
                   $container = $this->getConfigurationPool()->getContainer();
                   dump($container->get('request_stack')->getCurrentRequest()->getBasePath());
                   $fullPath = $container->get('request_stack')->getCurrentRequest()->getBasePath().'/'.$webPath;

                   // add a 'help' option containing the preview's img tag
                   $fileFieldOptions['help'] = '<img src="'.$fullPath.'" class="admin-preview" />';
               }

        $formMapper->add('product')
            ->add('file', FileType::class,  $fileFieldOptions)
//                   ->add('file', 'file', $fileFieldOptions)
               ;
    }

    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper->add('product')
            ->add('filepath');
    }

    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper->addIdentifier('id')
            ->add('product')
//            ->add('file')
            ->add('filepath');
    }

    public function prePersist($object)
    {
        dump('prePersist');
//        parent::prePersist($object); // TODO: Change the autogenerated stub
        $this->getSubject()->imageUpload();
    }

    public function preUpdate($object)
    {
        dump('preUpdate');
//        parent::prePersist($object); // TODO: Change the autogenerated stub
        $this->getSubject()->imageUpload();
    }

}